package main

import (
	"crypto/ecdsa"
	"crypto/rand"
	"encoding/hex"
	"os"
	"os/exec"
	"strings"
)

type RawMediaNodeStream struct {
	hashes [][]byte
}

func NewRawMediaNodeStream(file string) (*RawMediaNodeStream, error) {
	hashes, err := GenFrameHashes(file)
	if err != nil {
		return nil, err
	}

	stream := &RawMediaNodeStream{
		hashes: hashes,
	}

	return stream, nil
}

func (s *RawMediaNodeStream) RootHash() (string, error) {
	dag := NewSimpleDAG(s.hashes)
	link, err := dag.Save()
	if err != nil {
		return "", err
	}

	return link.String(), nil
}

func (s *RawMediaNodeStream) Sign(priv *ecdsa.PrivateKey) ([][]byte, error) {
	// Sign all the hashes
	sigs := [][]byte{}
	for _, hash := range s.hashes {
		sig, err := ecdsa.SignASN1(rand.Reader, priv, hash)
		if err != nil {
			return nil, err
		}

		sigs = append(sigs, sig)
	}

	return sigs, nil
}

func (s *RawMediaNodeStream) Verify(pub *ecdsa.PublicKey, sigs [][]byte) bool {
	for i, hash := range s.hashes {
		sig := sigs[i]

		if !ecdsa.VerifyASN1(pub, hash, sig) {
			return false
		}
	}

	return true
}

func GenFrameHashes(file string) ([][]byte, error) {
	// Generate file with list of frame hashes with ffmpeg framehash muxer
	// https://ffmpeg.org/ffmpeg-formats.html#framehash-1
	hashfile := "hashes.sha256"
	args := []string{
		"-i",
		file,
		"-f",
		"framehash",
		hashfile,
	}
	cmd := exec.Command("ffmpeg", args...)

	err := cmd.Run()

	if err != nil {
		return nil, err
	}

	hashes, err := ReadFrameHashes(hashfile)
	if err != nil {
		return nil, err
	}

	if err := os.Remove(hashfile); err != nil {
		return nil, err
	}

	return hashes, nil
}

// Read frame hashes from file generated by ffmpeg
func ReadFrameHashes(file string) ([][]byte, error) {
	return ReadLinesWithParser(file, func(line string, lineNum int) ([]byte, error) {
		if lineNum < 11 {
			return nil, nil
		}

		fields := strings.Split(line, ",")

		if len(fields) < 6 {
			return nil, nil
		}

		hash, err := hex.DecodeString(strings.TrimSpace(fields[5]))
		if err != nil {
			return nil, err
		}

		return hash, nil
	})
}
